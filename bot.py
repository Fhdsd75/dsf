import os
import io
import sqlite3
import logging
import shutil
import zipfile
import asyncio
from datetime import datetime
from zoneinfo import ZoneInfo
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters,
    CallbackQueryHandler, ContextTypes, ConversationHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
GET_FIRST_NAME, GET_LAST_NAME, GET_CLASS, ADD_CLASS, ADD_ADMIN_ID, ADD_ADMIN_ACCESS, UPLOAD_SCREENSHOT, SET_MODO_URL = range(8)

# –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –≥–ª–∞–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–ø–æ ID)
MAIN_ADMINS = {6897531034, 6176677671, 1552916570, 1040487188, 1380600483, 7176188474, 651856676}

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
PHOTOS_DIR = "photos"
os.makedirs(PHOTOS_DIR, exist_ok=True)
TEMP_ZIP_DIR = "temp_zip"
os.makedirs(TEMP_ZIP_DIR, exist_ok=True)

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏
async def delete_file_after_delay(file_path: str, delay: int):
    await asyncio.sleep(delay)
    try:
        os.remove(file_path)
        logging.info(f"–§–∞–π–ª {file_path} —É–¥–∞–ª—ë–Ω –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('school_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS students (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER UNIQUE,
            first_name TEXT,
            last_name TEXT,
            class TEXT,
            username TEXT
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS classes (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT UNIQUE
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS admins (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER UNIQUE,
            username TEXT,
            class_access TEXT
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS screenshots (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            file_path TEXT,
            timestamp TEXT
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS settings (
            key TEXT PRIMARY KEY,
            value TEXT
        )
    ''')
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ MODO
    cursor.execute("INSERT OR IGNORE INTO settings (key, value) VALUES ('modo_url', 'https://class-kz.ru/ucheniku/modo-4-klass/')")
    cursor.execute("INSERT OR IGNORE INTO settings (key, value) VALUES ('modo_active', 'true')")
    conn.commit()
    conn.close()

init_db()

# ## –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    conn = sqlite3.connect('school_bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM students WHERE user_id = ?", (user_id,))
    student = cursor.fetchone()
    conn.close()
    if student:
        await update.message.reply_text("üéâ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –í–æ—Ç –≤–∞—à–µ –º–µ–Ω—é:")
        await student_menu(update, context)
        return ConversationHandler.END
    else:
        await update.message.reply_text("üëã –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        return GET_FIRST_NAME

async def get_first_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    context.user_data['first_name'] = update.message.text.strip()
    await update.message.delete()
    await context.bot.send_message(chat_id, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    return GET_LAST_NAME

async def get_last_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    context.user_data['last_name'] = update.message.text.strip()
    await update.message.delete()
    conn = sqlite3.connect('school_bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM classes")
    classes = [row[0] for row in cursor.fetchall()]
    conn.close()
    if not classes:
        await context.bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return ConversationHandler.END
    keyboard = [[InlineKeyboardButton(cls, callback_data=cls)] for cls in classes]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(chat_id, "üè´ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∫–ª–∞—Å—Å:", reply_markup=reply_markup)
    return GET_CLASS

async def get_class(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    class_name = query.data
    user_id = query.from_user.id
    first_name = context.user_data.get('first_name')
    last_name = context.user_data.get('last_name')
    username = query.from_user.username if query.from_user.username else ""
    conn = sqlite3.connect('school_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT OR IGNORE INTO students (user_id, first_name, last_name, class, username)
        VALUES (?, ?, ?, ?, ?)
    ''', (user_id, first_name, last_name, class_name, username))
    conn.commit()
    conn.close()
    await query.message.delete()
    await query.message.reply_text(f"‚úÖ –°–ø–∞—Å–∏–±–æ, {first_name} {last_name}! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∫–ª–∞—Å—Å–µ {class_name}.")
    await student_menu(update, context)
    return ConversationHandler.END

# ## –ê–¥–º–∏–Ω—Å–∫–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
async def sql_all_get(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id not in MAIN_ADMINS:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    conn = sqlite3.connect('school_bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM classes")
    classes = [row[0] for row in cursor.fetchall()]
    conn.close()
    keyboard = []
    for i in range(0, len(classes), 2):
        row = []
        row.append(InlineKeyboardButton(classes[i], callback_data=f"class_{classes[i]}"))
        if i + 1 < len(classes):
            row.append(InlineKeyboardButton(classes[i + 1], callback_data=f"class_{classes[i + 1]}"))
        keyboard.append(row)
    keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∞—Å—Å", callback_data="add_class")])
    keyboard.append([InlineKeyboardButton("üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏", callback_data="manage_admins")])
    keyboard.append([InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏", callback_data="download_all_photos")])
    keyboard.append([InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ MODO", callback_data="modo_settings")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üîß –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def admin_add_class(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.callback_query.message.reply_text("üè´ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞:")
    return ADD_CLASS

async def save_new_class(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    new_class = update.message.text.strip()
    await update.message.delete()
    if not new_class:
        await context.bot.send_message(chat_id, "‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return ADD_CLASS
    conn = sqlite3.connect('school_bot.db')
    cursor = conn.cursor()
    try:
        cursor.execute("INSERT INTO classes (name) VALUES (?)", (new_class,))
        conn.commit()
        os.makedirs(os.path.join(PHOTOS_DIR, new_class), exist_ok=True)
        await context.bot.send_message(chat_id, f"‚úÖ –ö–ª–∞—Å—Å '{new_class}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    except sqlite3.IntegrityError:
        await context.bot.send_message(chat_id, f"‚ö†Ô∏è –ö–ª–∞—Å—Å '{new_class}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª–∞—Å—Å–∞: {e}")
        await context.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        conn.close()
    return ConversationHandler.END

async def manage_admins(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="add_admin")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.edit_text("üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏:", reply_markup=reply_markup)

async def admin_add_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.callback_query.message.reply_text("üÜî –í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
    return ADD_ADMIN_ID

async def save_admin_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    try:
        admin_id = int(update.message.text.strip())
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        return ADD_ADMIN_ID
    context.user_data['new_admin_id'] = admin_id
    await update.message.delete()
    await context.bot.send_message(chat_id, "üè´ –í–≤–µ–¥–∏—Ç–µ –∫–ª–∞—Å—Å—ã, –∫ –∫–æ—Ç–æ—Ä—ã–º –¥–∞—Ç—å –¥–æ—Å—Ç—É–ø (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –∏–ª–∏ 'all' –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º –∫–ª–∞—Å—Å–∞–º):")
    return ADD_ADMIN_ACCESS

async def save_admin_access(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    access_input = update.message.text.strip()
    await update.message.delete()
    if access_input.lower() == 'all':
        class_access = "all"
    else:

        
        classes = [cls.strip() for cls in access_input.split(',') if cls.strip()]
        class_access = ",".join(classes)
    admin_id = context.user_data.get('new_admin_id')
    conn = sqlite3.connect('school_bot.db')
    cursor = conn.cursor()
    try:
        chat = await context.bot.get_chat(admin_id)
        username = chat.username if chat.username else "–ù–µ —É–∫–∞–∑–∞–Ω"
        cursor.execute("INSERT OR REPLACE INTO admins (user_id, username, class_access) VALUES (?, ?, ?)",
                       (admin_id, username, class_access))
        conn.commit()
        await context.bot.send_message(chat_id, f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å ID {admin_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Å –¥–æ—Å—Ç—É–ø–æ–º: {class_access}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        await context.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    finally:
        conn.close()
    MAIN_ADMINS.add(admin_id)
    return ConversationHandler.END

async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    conn = sqlite3.connect('school_bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM classes")
    classes = [row[0] for row in cursor.fetchall()]
    conn.close()
    keyboard = []
    for i in range(0, len(classes), 2):
        row = []
        row.append(InlineKeyboardButton(classes[i], callback_data=f"class_{classes[i]}"))
        if i + 1 < len(classes):
            row.append(InlineKeyboardButton(classes[i + 1], callback_data=f"class_{classes[i + 1]}"))
        keyboard.append(row)
    keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∞—Å—Å", callback_data="add_class")])
    keyboard.append([InlineKeyboardButton("üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏", callback_data="manage_admins")])
    keyboard.append([InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏", callback_data="download_all_photos")])
    keyboard.append([InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ MODO", callback_data="modo_settings")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.edit_text("üîß –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def show_class_students(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    if not data.startswith("class_"):
        await query.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return
    class_name = data[6:]
    conn = sqlite3.connect('school_bot.db')
    cursor = conn.cursor()
    cursor.execute("""
        SELECT s.id, s.first_name, s.last_name,
               (SELECT MAX(timestamp) FROM screenshots WHERE user_id = s.user_id) as last_upload,
               (SELECT COUNT(*) FROM screenshots WHERE user_id = s.user_id) as screenshot_count
        FROM students s
        WHERE s.class = ?
    """, (class_name,))
    students = cursor.fetchall()
    conn.close()
    if not students:
        await query.answer("üë• –í —ç—Ç–æ–º –∫–ª–∞—Å—Å–µ –Ω–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤.", show_alert=True)
        return
    keyboard = []
    for sid, fn, ln, last_upload, screenshot_count in students:
        last_upload_text = last_upload if last_upload else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        button_text = f"{fn} {ln} (—Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: {screenshot_count}, –ø–æ—Å–ª–µ–¥.: {last_upload_text})"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"student_{sid}")])
    keyboard.append([InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å –≤—Å–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã", callback_data=f"download_class_{class_name}")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(f"üë• –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ –∫–ª–∞—Å—Å–∞ {class_name}:", reply_markup=reply_markup)

async def show_student_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    try:
        student_id = int(data.split("_")[1])
    except (IndexError, ValueError):
        await query.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return
    conn = sqlite3.connect('school_bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT first_name, last_name, class, username, user_id FROM students WHERE id = ?", (student_id,))
    student = cursor.fetchone()
    conn.close()
    if not student:
        await query.answer("üë§ –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    first_name, last_name, class_name, username, student_user_id = student
    profile_text = (f"üë§ –ò–º—è: {first_name}\nüë§ –§–∞–º–∏–ª–∏—è: {last_name}\nüè´ –ö–ª–∞—Å—Å: {class_name}\nüì± –¢–µ–ª–µ–≥—Ä–∞–º: @{username}"
                    if username else
                    f"üë§ –ò–º—è: {first_name}\nüë§ –§–∞–º–∏–ª–∏—è: {last_name}\nüè´ –ö–ª–∞—Å—Å: {class_name}\nüì± –¢–µ–ª–µ–≥—Ä–∞–º: –ù–µ —É–∫–∞–∑–∞–Ω")
    conn = sqlite3.connect('school_bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id, file_path, timestamp FROM screenshots WHERE user_id = ?", (student_user_id,))
    screenshots = cursor.fetchall()
    conn.close()
    keyboard = []
    for i, (sc_id, _, timestamp) in enumerate(screenshots, start=1):
        keyboard.append([InlineKeyboardButton(f"üì∑ –°–∫—Ä–∏–Ω {i} ({timestamp})", callback_data=f"view_screenshot_{sc_id}")])
    if screenshots:
        keyboard.append([InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å –≤—Å–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã", callback_data=f"download_student_{student_user_id}")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"class_{class_name}")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(profile_text, reply_markup=reply_markup)

async def view_screenshot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    try:
        sc_id = int(query.data.split("_")[2])
    except (IndexError, ValueError):
        await query.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return
    conn = sqlite3.connect('school_bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT file_path FROM screenshots WHERE id = ?", (sc_id,))
    result = cursor.fetchone()
    conn.close()
    if not result:
        await query.answer("üì∑ –°–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    file_path = result[0]
    await query.answer()
    await context.bot.send_photo(query.message.chat_id, photo=open(file_path, 'rb'))

async def download_student(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    try:
        student_user_id = int(query.data.split("_")[2])
    except (IndexError, ValueError):
        await query.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return
    conn = sqlite3.connect('school_bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT file_path FROM screenshots WHERE user_id = ?", (student_user_id,))
    files = [row[0] for row in cursor.fetchall()]
    conn.close()
    if not files:
        await query.answer("üì∑ –ù–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.", show_alert=True)
        return
    zip_file = os.path.join(TEMP_ZIP_DIR, f"student_{student_user_id}_screenshots.zip")
    with zipfile.ZipFile(zip_file, 'w') as zf:
        for file in files:
            zf.write(file, arcname=os.path.basename(file))
    await query.message.reply_document(document=open(zip_file, 'rb'),
                                       filename=f"student_{student_user_id}_screenshots.zip")
    await query.answer("üì§ –ê—Ä—Ö–∏–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    asyncio.create_task(delete_file_after_delay(zip_file, 300))

async def download_class(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    class_name = query.data.split("_", 1)[1]
    class_folder = os.path.join(PHOTOS_DIR, class_name)
    if not os.path.isdir(class_folder):
        await query.answer("üì∑ –ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞.", show_alert=True)
        return
    base_name = os.path.join(TEMP_ZIP_DIR, f"{class_name}_screenshots")
    shutil.make_archive(base_name, 'zip', class_folder)
    zip_file = base_name + ".zip"
    await query.message.reply_document(document=open(zip_file, 'rb'),
                                       filename=f"{class_name}_screenshots.zip")
    await query.answer("üì§ –ê—Ä—Ö–∏–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    asyncio.create_task(delete_file_after_delay(zip_file, 300))

async def download_all_photos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    base_name = os.path.join(TEMP_ZIP_DIR, "all_photos")
    shutil.make_archive(base_name, 'zip', PHOTOS_DIR)
    zip_file = base_name + ".zip"
    await query.message.reply_document(document=open(zip_file, 'rb'),
                                       filename="all_photos.zip")
    await query.answer("üì§ –ê—Ä—Ö–∏–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    asyncio.create_task(delete_file_after_delay(zip_file, 300))

# ## MODO Settings
async def modo_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    conn = sqlite3.connect('school_bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT value FROM settings WHERE key = 'modo_url'")
    modo_url = cursor.fetchone()
    modo_url = modo_url[0] if modo_url else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    cursor.execute("SELECT value FROM settings WHERE key = 'modo_active'")
    modo_active = cursor.fetchone()
    modo_active = modo_active[0] if modo_active else "false"
    conn.close()
    active_text = "‚úÖ –î–∞" if modo_active.lower() == 'true' else "‚ùå –ù–µ—Ç"
    text = f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ MODO:\n\nüîó –¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞: {modo_url}\nüîî MODO –∞–∫—Ç–∏–≤–µ–Ω: {active_text}"
    keyboard = [
        [InlineKeyboardButton("‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ MODO", callback_data="set_modo_url")],
        [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ MODO", callback_data="remove_modo_url")],
        [InlineKeyboardButton("‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å MODO", callback_data="activate_modo")],
        [InlineKeyboardButton("üö´ –í—Ä–µ–º–µ–Ω–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å MODO", callback_data="deactivate_modo")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup)

async def set_modo_url_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.callback_query.message.reply_text("üîó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ MODO:")
    return SET_MODO_URL

async def set_modo_url_save(update: Update, context: ContextTypes.DEFAULT_TYPE):
    new_url = update.message.text.strip()
    if not new_url:
        await update.message.reply_text("‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return SET_MODO_URL
    conn = sqlite3.connect('school_bot.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE settings SET value = ? WHERE key = 'modo_url'", (new_url,))
    conn.commit()
    conn.close()
    await update.message.reply_text(f"‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ MODO –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {new_url}")
    return ConversationHandler.END

async def remove_modo_url(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    conn = sqlite3.connect('school_bot.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE settings SET value = NULL WHERE key = 'modo_url'")
    conn.commit()
    conn.close()
    await query.edit_message_text("‚ùå –°—Å—ã–ª–∫–∞ –Ω–∞ MODO —É–¥–∞–ª–µ–Ω–∞.")
    await modo_settings(update, context)

async def activate_modo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    conn = sqlite3.connect('school_bot.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE settings SET value = 'true' WHERE key = 'modo_active'")
    conn.commit()
    conn.close()
    await query.edit_message_text("‚úÖ MODO –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
    await modo_settings(update, context)

async def deactivate_modo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    conn = sqlite3.connect('school_bot.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE settings SET value = 'false' WHERE key = 'modo_active'")
    conn.commit()
    conn.close()
    await query.edit_message_text("üö´ MODO –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
    await modo_settings(update, context)

# ## –ú–µ–Ω—é —É—á–µ–Ω–∏–∫–∞
async def student_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect('school_bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT value FROM settings WHERE key = 'modo_active'")
    modo_active = cursor.fetchone()
    modo_active = modo_active[0].lower() == 'true' if modo_active else False
    conn.close()
    keyboard = []
    if modo_active:
        keyboard.append([InlineKeyboardButton("üìö –ó–∞–¥–∞–Ω–∏—è MODO", callback_data="modo_tasks")])
    keyboard.append([InlineKeyboardButton("üìÇ –ú–æ–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã", callback_data="my_screenshots")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    chat_id = update.effective_chat.id
    await context.bot.send_message(chat_id, "üéì –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def modo_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.delete()
    conn = sqlite3.connect('school_bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT value FROM settings WHERE key = 'modo_url'")
    modo_url = cursor.fetchone()
    modo_url = modo_url[0] if modo_url else None
    conn.close()
    keyboard = []
    if modo_url:
        keyboard.append([InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞–Ω–∏—è–º", url=modo_url)])
    keyboard.append([InlineKeyboardButton("‚úÖ –Ø –ø—Ä–æ—à–µ–ª —Ç–µ—Å—Ç", callback_data="upload_screenshot")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(query.message.chat_id, "üìö –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def upload_screenshot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.delete()
    await context.bot.send_message(query.message.chat_id, "üì∑ –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç–∞.")
    return UPLOAD_SCREENSHOT

async def save_screenshot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.message.from_user.id
    photo = update.message.photo[-1]
    file_id = photo.file_id
    file = await context.bot.get_file(file_id)
    conn = sqlite3.connect('school_bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT class FROM students WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    class_name = result[0] if result else "unknown"
    class_folder = os.path.join(PHOTOS_DIR, class_name)
    os.makedirs(class_folder, exist_ok=True)
    file_path = os.path.join(class_folder, f"screenshot_{user_id}_{file_id}.jpg")
    upload_timestamp = datetime.now(ZoneInfo("Asia/Almaty")).strftime("%Y-%m-%d %H:%M")
    await file.download_to_drive(file_path)
    await update.message.delete()
    cursor.execute("INSERT INTO screenshots (user_id, file_path, timestamp) VALUES (?, ?, ?)",
                   (user_id, file_path, upload_timestamp))
    conn.commit()
    conn.close()
    await context.bot.send_message(chat_id, f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω! (–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {upload_timestamp})\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –≤ —Å–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ.")
    return ConversationHandler.END

async def my_screenshots(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = query.message.chat_id
    user_id = query.from_user.id
    conn = sqlite3.connect('school_bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT file_path FROM screenshots WHERE user_id = ?", (user_id,))
    screenshots = cursor.fetchall()
    conn.close()
    await query.message.delete()
    if not screenshots:
        await context.bot.send_message(chat_id, "üì∑ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤.")
        return
    await context.bot.send_message(chat_id, "üìÇ –í–∞—à–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã:")
    for (path,) in screenshots:
        with open(path, 'rb') as photo_file:
            await context.bot.send_photo(chat_id, photo=photo_file)
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(chat_id, "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", reply_markup=reply_markup)

async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.delete()
    await student_menu(update, context)

# ## –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = ApplicationBuilder().token("8172736488:AAF6tSc9TWCviWD8wVzXx6aY1z5MBOmTlWA").build()

    registration_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            GET_FIRST_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_first_name)],
            GET_LAST_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_last_name)],
            GET_CLASS: [CallbackQueryHandler(get_class)]
        },
        fallbacks=[]
    )

    admin_class_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(admin_add_class, pattern='^add_class$')],
        states={
            ADD_CLASS: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_new_class)]
        },
        fallbacks=[]
    )

    admin_admin_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(admin_add_admin, pattern='^add_admin$')],
        states={
            ADD_ADMIN_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_admin_id)],
            ADD_ADMIN_ACCESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_admin_access)]
        },
        fallbacks=[]
    )

    screenshot_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(upload_screenshot, pattern='^upload_screenshot$')],
        states={
            UPLOAD_SCREENSHOT: [MessageHandler(filters.PHOTO, save_screenshot)]
        },
        fallbacks=[]
    )

    modo_url_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(set_modo_url_start, pattern='^set_modo_url$')],
        states={
            SET_MODO_URL: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_modo_url_save)]
        },
        fallbacks=[]
    )

    application.add_handler(registration_handler)
    application.add_handler(CommandHandler("sqlallget", sql_all_get))
    application.add_handler(admin_class_handler)
    application.add_handler(admin_admin_handler)
    application.add_handler(CallbackQueryHandler(manage_admins, pattern='^manage_admins$'))
    application.add_handler(CallbackQueryHandler(back_to_main, pattern='^back_to_main$'))
    application.add_handler(CallbackQueryHandler(show_class_students, pattern='^class_'))
    application.add_handler(CallbackQueryHandler(show_student_profile, pattern='^student_'))
    application.add_handler(CallbackQueryHandler(view_screenshot, pattern='^view_screenshot_'))
    application.add_handler(CallbackQueryHandler(download_student, pattern='^download_student_'))
    application.add_handler(CallbackQueryHandler(download_class, pattern='^download_class_'))
    application.add_handler(CallbackQueryHandler(download_all_photos, pattern='^download_all_photos$'))
    application.add_handler(CommandHandler("menu", student_menu))
    application.add_handler(CallbackQueryHandler(modo_tasks, pattern='^modo_tasks$'))
    application.add_handler(CallbackQueryHandler(my_screenshots, pattern='^my_screenshots$'))
    application.add_handler(CallbackQueryHandler(back_to_menu, pattern='^back_to_menu$'))
    application.add_handler(screenshot_handler)
    application.add_handler(CallbackQueryHandler(modo_settings, pattern='^modo_settings$'))
    application.add_handler(CallbackQueryHandler(remove_modo_url, pattern='^remove_modo_url$'))
    application.add_handler(CallbackQueryHandler(activate_modo, pattern='^activate_modo$'))
    application.add_handler(CallbackQueryHandler(deactivate_modo, pattern='^deactivate_modo$'))
    application.add_handler(modo_url_handler)

    application.run_polling()

if __name__ == '__main__':
    main()